services:   # ğŸ‘ˆ AquÃ­ definimos los contenedores que forman parte de la app
    app:      # ğŸ‘ˆ Este es el contenedor de Laravel (PHP-FPM)
        build:
            context: .               # ğŸ‘ˆ Usa el Dockerfile que estÃ¡ en la raÃ­z del proyecto
            dockerfile: Dockerfile   # ğŸ‘ˆ Archivo Dockerfile para construir la imagen de Laravel
        container_name: laravel_app
        restart: unless-stopped    # ğŸ‘ˆ Si el contenedor se apaga, se reinicia automÃ¡ticamente
        working_dir: /var/www      # ğŸ‘ˆ Carpeta de trabajo dentro del contenedor
        networks:
            - laravel                # ğŸ‘ˆ Conecta este contenedor a la red "laravel"
        command: ["php-fpm", "-F"] # ğŸ‘ˆ Arranca PHP-FPM en primer plano (sirve PHP)

    webserver:   # ğŸ‘ˆ Este es el contenedor Nginx (el servidor web)
        image: nginx:alpine        # ğŸ‘ˆ Usa la imagen oficial de Nginx (versiÃ³n ligera Alpine)
        container_name: laravel_nginx
        restart: unless-stopped
        ports:
            - "80:80"                # ğŸ‘ˆ Expone el puerto 80 del host â†’ puerto 80 del contenedor
            #    AsÃ­ accedes con http://localhost directamente
        volumes:
            - .:/var/www             # ğŸ‘ˆ Monta el proyecto (host) en /var/www (contenedor)
            #    AquÃ­ es donde Nginx y PHP verÃ¡n tu cÃ³digo Laravel
            - ./docker/nginx/conf.d:/etc/nginx/conf.d
            # ğŸ‘ˆ Monta tu configuraciÃ³n personalizada de Nginx
        networks:
            - laravel                # ğŸ‘ˆ Conecta este contenedor a la red "laravel"

networks:
    laravel:   # ğŸ‘ˆ Define la red interna "laravel"
    #    Para que app (php-fpm) y webserver (nginx) se comuniquen entre sÃ­

